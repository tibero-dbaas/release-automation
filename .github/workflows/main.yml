name: release-automation-main

on:
  workflow_call:
    inputs:
      RELEASE_NOTE:
        required: true
        type: string
    secrets:
      GIT_ACCESS_TOKEN:
        required: true

jobs:
  check_pr_branch_type:
    runs-on: ubuntu-latest
    outputs:
      incremental_type: ${{ steps.determine_branch_type.outputs.incremental_type }}
      skip_gen_release: ${{ steps.error_handling.outputs.skip_gen_release }}
    steps:
      - uses: actions/checkout@v2
      - name: Determine branch type
        id: determine_branch_type
        env:
          BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        run: |
          branch_prefix=$(echo ${{ env.BRANCH_NAME }} | cut -d '/' -f1)
          echo "branch_prefix=$branch_prefix" >> $GITHUB_ENV

          if [ "$branch_prefix" == "release" ]; then
            incremental_type=MAJOR
          elif [ "$branch_prefix" == "feature" ]; then
            incremental_type=MINOR
          elif [ "$branch_prefix" == "hotfix" ]; then
            incremental_type=MINOR
          elif [ "$branch_prefix" == "patch" ]; then
            incremental_type=PATCH
          else
            incremental_type=UNKNOWN
          fi
          
          if [ "$incremental_type" == "UNKNOWN" ] ; then
            echo "needs_error_handling=true" >> $GITHUB_ENV
          else
            echo "incremental_type=$incremental_type" >> $GITHUB_OUTPUT
          fi

      - name: Error Handling
        id: error_handling
        if: ${{ env.needs_error_handling }} == true
        run: |          
          case "$branch_prfix" in
            "gh-action") skip_gen_release=true ;;
            *) skip_gen_release=false ;;
          esac
          
          if [ ! $skip_gen_release ] ; then
            echo "::error file=main.yml::Wrong Branch Name"
          else
            echo "skip_gen_release=true" >> $GITHUB_OUTPUT
          fi

  generate_new_release:
    needs: check_pr_branch_type
    env:
      INCREMENTAL_TYPE: ${{ needs.check_pr_branch_type.outputs.incremental_type }}
    if: ${{ needs.check_pr_branch_type.outputs.skip_gen_release }} == false
    runs-on: ubuntu-latest
    steps:
      - name: Check release existence
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
        run: |
          curl -L -f -o ./releases.out \
               -H "Accept: application/vnd.github+json" \
               -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "X-GitHub-Api-Version: 2022-11-28" \
               https://api.github.com/repos/${{ github.repository }}/releases
          
          return_code=$?
          
          if [ $return_code -eq 0 ]; then
            reply=$( cat ./releases.out )
            if [ "$(echo "$reply" | jq '. | length')" -gt 0 ] ; then
              echo "Releases exist"
              echo "exist=true" >> $GITHUB_OUTPUT
            else
              echo "No releases found"
              echo "exist=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::error file=main.yml::Invalid access to the requestesd repository"
          fi

      #https://github.com/marketplace/actions/get-latest-release
      - name: Get Current Release
        if: ${{ steps.check_release.outputs.exist == 'true' }}
        id: get_current_release
        uses: pozetroninc/github-action-get-latest-release@master
        env:
            GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GIT_ACCESS_TOKEN }}

      - name: Set Current Release tag name, prerelease version
        run: |
          # Remove 'v' from tag name
          CURRENT_TAG_NAME=$(echo "${{ steps.get_current_release.outputs.release }}" | cut -d'-' -f1 | sed 's/^v//')
          if [ -z $CURRENT_TAG_NAME ]; then
            echo "CURRENT_TAG_NAME=0.0.0" >> $GITHUB_ENV
          else
            echo "CURRENT_TAG_NAME=$(echo "${{ steps.get_current_release.outputs.release }}" | cut -d'-' -f1 | sed 's/^v//')" >> $GITHUB_ENV
          fi

      #https://github.com/marketplace/actions/update-semantic-version
      - name: Set new semantic version
        id: new_version
        uses: cookbenjamin/update-version@v1.0.1
        with:
          current-version: '${{ env.CURRENT_TAG_NAME }}' #X.Y.Z
          increment-version-fragment: '${{ env.INCREMENTAL_TYPE }}'

      - name: Set current release version
        run: |
          echo "CURRENT_MAJOR_VERSION=$(echo ${{ env.CURRENT_TAG_NAME }} | cut -d'.' -f1)" >> $GITHUB_ENV

      - name: Create release/stable branch
        if: ${{ env.CURRENT_MAJOR_VERSION != '0' && env.INCREMENTAL_TYPE == 'MAJOR' }}
        uses: peterjgrainger/action-create-branch@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
        with:
          branch: 'refs/heads/release-stable-${{ env.CURRENT_MAJOR_VERSION }}'

      - name: Create release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
        with:
            tag_name: 'v${{ steps.new_version.outputs.updated-version }}'
            release_name: 'v${{ steps.new_version.outputs.updated-version }}'
            body: ${{ inputs.RELEASE_NOTE }}
